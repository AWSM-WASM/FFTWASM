{"version":3,"file":"WASMkissFFT.wasm","sources":["../src/index.js"],"sourcesContent":["const wasmBytes = new Uint8Array(WASM_PRECOMPILED_BYTES);\n\nconst encoder = new TextEncoder();\n\nasync function pulse() {\n  const {\n    instance: { exports: { _kiss_fftr_alloc, _kiss_fftr, _kiss_fftri, _free, _malloc, _kiss_fft_alloc, _kiss_fft }}\n  } = await WebAssembly.instantiate(wasmBytes);\n  // return {\n    console.log(\"kiss fft\", _kiss_fft);\n    console.log(\"instance\", instance);\n\n    // fftReal(size) {\n    //   this.size = size;\n    //   this.fcfg = _kiss_fft_alloc(size, false);\n    //   this.icfg = _kiss_fft_alloc(size, true);\n      \n    //   this.inptr = _malloc(size*8 + size*8);\n    //   this.outptr = this.inptr + size*8;\n      \n    //   this.cin = new Float32Array(m.HEAPU8.buffer, this.inptr, size*2);\n    //   this.cout = new Float32Array(m.HEAPU8.buffer, this.outptr, size*2);\n      \n    //   this.forward = function(cin) {\n    //     this.cin.set(cin);\n    //     _kiss_fft(this.fcfg, this.inptr, this.outptr);\n    //     return new Float32Array(m.HEAPU8.buffer,\n    //       this.outptr, this.size * 2);\n    //     }\n        \n    //   this.inverse = function(cin) {\n    //     this.cin.set(cpx);\n    //     m._kiss_fft(this.icfg, this.inptr, this.outptr);\n    //     return new Float32Array(m.HEAPU8.buffer,\n    //       this.outptr, this.size * 2);\n    //   }\n          \n    //   this.dispose = function() {\n    //     m._free(this.inptr);\n    //     m._free(this.fcfg);\n    //     m._free(this.icfg);\n    //   }\n    // },\n        \n    // fftComplex(size) {\n    //   this.size = size;\n    //   this.fcfg = m._kiss_fftr_alloc(size, false);\n    //   this.icfg = m._kiss_fftr_alloc(size, true);\n          \n    //   this.rptr = m._malloc(size*4 + (size+2)*4);\n    //   this.cptr = this.rptr + size*4;\n          \n    //   this.ri = new Float32Array(m.HEAPU8.buffer, this.rptr, size);\n    //   this.ci = new Float32Array(m.HEAPU8.buffer, this.cptr, size+2);\n          \n    //   this.forward = function(real) {\n    //     this.ri.set(real);\n    //     m._kiss_fftr(this.fcfg, this.rptr, this.cptr);\n    //     return new Float32Array(m.HEAPU8.buffer, this.cptr, this.size + 2); //changed here\n    //   }\n    //   this.inverse = function(cpx) {\n    //     this.ci.set(cpx);\n    //     m._kiss_fftri(this.icfg, this.cptr, this.rptr);\n    //     return new Float32Array(m.HEAPU8.buffer, this.rptr, this.size);\n    //   }\n    //   this.dispose = function() {\n    //     m._free(this.rptr);\n    //     m._free(this.fcfg);\n    //     m._free(this.icfg);\n    //   }\n    // }\n  // }\n}\n\nexport default pulse;\n\n// ====\n\n// var Module = {};\n\n// loadWASM = () => {\n//   return new Promise((resolve) => {\n//     fetch('src/WASMkissFFT.wasm')    // load the .wasm file\n//       .then(response => response.arrayBuffer())\n//       .then((buffer) => {    //return ArrayBuffer\n//         Module.wasmBinary = buffer;   // assign buffer to Module\n//         console.log(\"in buffering\");\n//         const script = document.createElement('script');\n//         script.src = 'src/WASMkissFFT.js';   // set script source\n//         script.type='text/javascript';\n//         script.onload = () => {    // once script has loaded\n//           console.log(\"Loaded Emscripten.\");\n//           resolve(Module);    // return Module\n//         };\n//         document.body.appendChild(script); // append script to DOM\n//         // doneEvent = new Event('done');\n//         // script.addEventListener('done', WASMkissFFT, WASMkissFFTR);\n//       });\n//     });\n//   };\n  \n//   loadWASM().then((m) => {    // 'm' now holds _myFunc()\n//   console.log(\"WASM loaded!\")\n\n//   function WASMkissFFT(size) {\n//     this.size = size;\n//     this.fcfg = m._kiss_fft_alloc(size, false);\n//     this.icfg = m._kiss_fft_alloc(size, true);\n    \n//     this.inptr = m._malloc(size*8 + size*8);\n//     this.outptr = this.inptr + size*8;\n    \n//     this.cin = new Float32Array(m.HEAPU8.buffer, this.inptr, size*2);\n//     this.cout = new Float32Array(m.HEAPU8.buffer, this.outptr, size*2);\n    \n//     this.forward = function(cin) {\n//       this.cin.set(cin);\n//       m._kiss_fft(this.fcfg, this.inptr, this.outptr);\n//       return new Float32Array(m.HEAPU8.buffer,\n//         this.outptr, this.size * 2);\n//       }\n      \n//     this.inverse = function(cin) {\n//       this.cin.set(cpx);\n//       m._kiss_fft(this.icfg, this.inptr, this.outptr);\n//       return new Float32Array(m.HEAPU8.buffer,\n//         this.outptr, this.size * 2);\n//     }\n        \n//     this.dispose = function() {\n//       m._free(this.inptr);\n//       m._free(this.fcfg);\n//       m._free(this.icfg);\n//     }\n//   }\n      \n//   function WASMkissFFTR(size) {\n//     this.size = size;\n//     this.fcfg = m._kiss_fftr_alloc(size, false);\n//     this.icfg = m._kiss_fftr_alloc(size, true);\n        \n//     this.rptr = m._malloc(size*4 + (size+2)*4);\n//     this.cptr = this.rptr + size*4;\n        \n//     this.ri = new Float32Array(m.HEAPU8.buffer, this.rptr, size);\n//     this.ci = new Float32Array(m.HEAPU8.buffer, this.cptr, size+2);\n        \n//     this.forward = function(real) {\n//       this.ri.set(real);\n//       m._kiss_fftr(this.fcfg, this.rptr, this.cptr);\n//       return new Float32Array(m.HEAPU8.buffer, this.cptr, this.size + 2); //changed here\n//     }\n//     this.inverse = function(cpx) {\n//       this.ci.set(cpx);\n//       m._kiss_fftri(this.icfg, this.cptr, this.rptr);\n//       return new Float32Array(m.HEAPU8.buffer, this.rptr, this.size);\n//     }\n//     this.dispose = function() {\n//       m._free(this.rptr);\n//       m._free(this.fcfg);\n//       m._free(this.icfg);\n//     }\n//   }\n\n//   function testWASMkissFFT(size) {\n//     var fft = new WASMkissFFTR(size);\n//     console.log(\"running wasmkissfft test\");\n//     var start = performance.now();\n//     var middle = start;\n//     var end = start;\n            \n//     total = 0.0;\n            \n//     for (var i = 0; i < 2*iterations; ++i) {\n//       if (i == iterations) {\n//         middle = performance.now();\n//       }\n//       var ri = inputReals(size);\n//       var out = fft.forward(ri);\n//       for (var j = 0; j <= size/2; ++j) {\n//         total += Math.sqrt(out[j*2] * out[j*2] + out[j*2+1] * out[j*2+1]);\n//       }\n//       // KissFFTR returns only the first half of the output (plus\n//       // DC/Nyquist) -- synthesise the conjugate half\n//       for (var j = 1; j < size/2; ++j) {\n//         total += Math.sqrt(out[j*2] * out[j*2] + out[j*2+1] * out[j*2+1]);\n//       }\n//     }\n//     var end = performance.now();\n       \n//     report(\"WASMkissfft\", start, middle, end, total);\n            \n//     fft.dispose();\n//   }\n            \n//   function testWASMkissFFTCC(size) {\n//     var fft = new WASMkissFFT(size);\n            \n//     var start = performance.now();\n//     var middle = start;\n//     var end = start;\n            \n//     total = 0.0;\n            \n//     for (var i = 0; i < 2*iterations; ++i) {\n//       if (i == iterations) {\n//         middle = performance.now();\n//       }\n//       var cin = inputInterleaved(size);\n//       var out = fft.forward(cin);\n//       for (var j = 0; j < size; ++j) {\n//         total += Math.sqrt(out[j*2] * out[j*2] + out[j*2+1] * out[j*2+1]);\n//       }\n//     }\n            \n//     var end = performance.now();\n            \n//     report(\"WASMkissfftcc\", start, middle, end, total);\n            \n//     fft.dispose();\n//   }\n\n//   var sizes = [ 4, 8, 512, 2048, 4096 ];\n//   var tests = [testWASMkissFFT, testWASMkissFFTCC];\n//   var nextTest = 0;\n//   var nextSize = 0;\n//   var interval;\n            \n//   function testWASM() {\n//     console.log(\"runnning testWASM\")\n//     clearInterval(interval);\n//     if (nextTest == tests.length) {\n//       nextSize++;\n//       nextTest = 0;\n//       if (nextSize == sizes.length) {\n//         return;\n//       }\n//     }\n//     f = tests[nextTest];\n//     size = sizes[nextSize];\n//     nextTest++;\n//     f(size);\n//     interval = setInterval(testWASM, 200);\n//   }\n//   console.log(\"created ALL WASM tests!!!\")\n//   testWASM();\n// }).then(() => {\n//   console.log(\"EXITED STUFF\")\n// })"],"names":["WebAssembly","instantiate","wasmBytes","instance","exports","_kiss_fftr_alloc","_kiss_fftr","_kiss_fftri","_free","_malloc","_kiss_fft_alloc","_kiss_fft","log","Uint8Array"],"mappings":"uVAIA,kIAGYA,YAAYC,YAAYC,uBADhCC,SAAYC,YAAWC,qBAAkBC,eAAYC,gBAAaC,UAAOC,YAASC,oBAAiBC,kBAG3FC,IAAI,WAAYD,WAChBC,IAAI,WAAYT,8GAVtBD,EAAY,IAAIW,wnxDAEN"}